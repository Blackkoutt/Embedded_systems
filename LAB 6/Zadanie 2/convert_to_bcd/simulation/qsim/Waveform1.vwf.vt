// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/08/2024 16:33:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          convert_to_bcd
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module convert_to_bcd_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] in_binary_value;
// wires                                               
wire [15:0] out_bcd_value;

// assign statements (if any)                          
convert_to_bcd i1 (
// port map - connection between master ports and signals/registers   
	.in_binary_value(in_binary_value),
	.out_bcd_value(out_bcd_value)
);
initial 
begin 
#60000 $finish;
end 
// in_binary_value[ 15 ]
initial
begin
	in_binary_value[15] = 1'b0;
end 
// in_binary_value[ 14 ]
initial
begin
	in_binary_value[14] = 1'b0;
end 
// in_binary_value[ 13 ]
initial
begin
	in_binary_value[13] = 1'b0;
end 
// in_binary_value[ 12 ]
initial
begin
	in_binary_value[12] = 1'b0;
end 
// in_binary_value[ 11 ]
initial
begin
	in_binary_value[11] = 1'b0;
	in_binary_value[11] = #50000 1'b1;
end 
// in_binary_value[ 10 ]
initial
begin
	in_binary_value[10] = 1'b0;
end 
// in_binary_value[ 9 ]
initial
begin
	in_binary_value[9] = 1'b0;
	in_binary_value[9] = #40000 1'b1;
end 
// in_binary_value[ 8 ]
initial
begin
	in_binary_value[8] = 1'b0;
	in_binary_value[8] = #40000 1'b1;
	in_binary_value[8] = #10000 1'b0;
end 
// in_binary_value[ 7 ]
initial
begin
	in_binary_value[7] = 1'b0;
	in_binary_value[7] = #30000 1'b1;
	in_binary_value[7] = #10000 1'b0;
end 
// in_binary_value[ 6 ]
initial
begin
	in_binary_value[6] = 1'b0;
	in_binary_value[6] = #20000 1'b1;
	in_binary_value[6] = #10000 1'b0;
	in_binary_value[6] = #10000 1'b1;
	in_binary_value[6] = #10000 1'b0;
end 
// in_binary_value[ 5 ]
initial
begin
	in_binary_value[5] = 1'b0;
	in_binary_value[5] = #10000 1'b1;
	in_binary_value[5] = #10000 1'b0;
end 
// in_binary_value[ 4 ]
initial
begin
	in_binary_value[4] = 1'b0;
	in_binary_value[4] = #10000 1'b1;
	in_binary_value[4] = #40000 1'b0;
end 
// in_binary_value[ 3 ]
initial
begin
	in_binary_value[3] = 1'b0;
	in_binary_value[3] = #10000 1'b1;
	in_binary_value[3] = #20000 1'b0;
	in_binary_value[3] = #20000 1'b1;
end 
// in_binary_value[ 2 ]
initial
begin
	in_binary_value[2] = 1'b1;
	in_binary_value[2] = #10000 1'b0;
	in_binary_value[2] = #10000 1'b1;
	in_binary_value[2] = #10000 1'b0;
	in_binary_value[2] = #10000 1'b1;
end 
// in_binary_value[ 1 ]
initial
begin
	in_binary_value[1] = 1'b1;
end 
// in_binary_value[ 0 ]
initial
begin
	in_binary_value[0] = 1'b0;
	in_binary_value[0] = #30000 1'b1;
	in_binary_value[0] = #10000 1'b0;
end 
endmodule

