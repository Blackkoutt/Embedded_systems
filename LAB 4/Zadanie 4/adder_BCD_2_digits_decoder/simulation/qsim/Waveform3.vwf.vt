// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/18/2024 23:13:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          adder_BCD_2_digits_decoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module adder_BCD_2_digits_decoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] X;
reg [3:0] Y;
reg cin;
// wires                                               
wire [0:6] H3;
wire [0:6] H5;
wire [0:6] S0;
wire [0:6] S1;
wire error;

// assign statements (if any)                          
adder_BCD_2_digits_decoder i1 (
// port map - connection between master ports and signals/registers   
	.H3(H3),
	.H5(H5),
	.S0(S0),
	.S1(S1),
	.X(X),
	.Y(Y),
	.cin(cin),
	.error(error)
);
initial 
begin 
#160000 $finish;
end 
// X[ 3 ]
always
begin
	X[3] = 1'b0;
	X[3] = #80000 1'b1;
	#80000;
end 
// X[ 2 ]
always
begin
	X[2] = 1'b0;
	X[2] = #40000 1'b1;
	#40000;
end 
// X[ 1 ]
always
begin
	X[1] = 1'b0;
	X[1] = #20000 1'b1;
	#20000;
end 
// X[ 0 ]
always
begin
	X[0] = 1'b0;
	X[0] = #10000 1'b1;
	#10000;
end 
// Y[ 3 ]
always
begin
	Y[3] = 1'b0;
	Y[3] = #80000 1'b1;
	#80000;
end 
// Y[ 2 ]
always
begin
	Y[2] = 1'b0;
	Y[2] = #40000 1'b1;
	#40000;
end 
// Y[ 1 ]
always
begin
	Y[1] = 1'b0;
	Y[1] = #20000 1'b1;
	#20000;
end 
// Y[ 0 ]
always
begin
	Y[0] = 1'b0;
	Y[0] = #10000 1'b1;
	#10000;
end 

// cin
initial
begin
	cin = 1'b0;
end 
endmodule

