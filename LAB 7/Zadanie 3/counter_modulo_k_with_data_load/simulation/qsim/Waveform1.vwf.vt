// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/19/2024 22:53:20"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          counter_modulo_k_with_data_load
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module counter_modulo_k_with_data_load_vlg_vec_tst();
// constants                                           
// general purpose registers
reg aclr;
reg clk;
reg [2:0] data;
reg enable;
reg load;
// wires                                               
wire [2:0] Q;
wire rollover;

// assign statements (if any)                          
counter_modulo_k_with_data_load i1 (
// port map - connection between master ports and signals/registers   
	.Q(Q),
	.aclr(aclr),
	.clk(clk),
	.data(data),
	.enable(enable),
	.load(load),
	.rollover(rollover)
);
initial 
begin 
#65000 $finish;
end 

// clk
initial
begin
	repeat(16)
	begin
		clk = 1'b0;
		clk = #2000 1'b1;
		# 2000;
	end
	clk = 1'b0;
end 

// aclr
initial
begin
	aclr = 1'b1;
	aclr = #52000 1'b0;
	aclr = #4000 1'b1;
end 

// enable
initial
begin
	enable = 1'b1;
	enable = #44000 1'b0;
	enable = #4000 1'b1;
end 

// load
initial
begin
	load = 1'b1;
	load = #4000 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b1;
	data[1] = #8000 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b1;
	data[0] = #8000 1'b0;
end 
endmodule

