// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/10/2024 17:46:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          adder_A_B_8_bits_decoders
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module adder_A_B_8_bits_decoders_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A_or_B;
reg areset;
reg clk;
// wires                                               
wire [0:6] H0;
wire [0:6] H1;
wire [0:6] H2;
wire [0:6] H3;
wire [0:6] H4;
wire [0:6] H5;
wire cout;

// assign statements (if any)                          
adder_A_B_8_bits_decoders i1 (
// port map - connection between master ports and signals/registers   
	.A_or_B(A_or_B),
	.H0(H0),
	.H1(H1),
	.H2(H2),
	.H3(H3),
	.H4(H4),
	.H5(H5),
	.areset(areset),
	.clk(clk),
	.cout(cout)
);
initial 
begin 
#80000 $finish;
end 

// clk
initial
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	clk = #5000 1'b0;
	clk = #15000 1'b1;
	clk = #5000 1'b0;
	clk = #25000 1'b1;
	clk = #5000 1'b0;
end 

// areset
initial
begin
	areset = 1'b0;
	areset = #45000 1'b1;
	areset = #5000 1'b0;
	areset = #25000 1'b1;
end 
// A_or_B[ 7 ]
initial
begin
	A_or_B[7] = 1'b0;
	A_or_B[7] = #5000 1'b1;
	A_or_B[7] = #5000 1'b0;
	A_or_B[7] = #5000 1'b1;
	A_or_B[7] = #10000 1'b0;
	A_or_B[7] = #20000 1'b1;
	A_or_B[7] = #10000 1'b0;
	A_or_B[7] = #10000 1'b1;
	A_or_B[7] = #10000 1'b0;
end 
// A_or_B[ 6 ]
initial
begin
	A_or_B[6] = 1'b0;
	A_or_B[6] = #5000 1'b1;
	A_or_B[6] = #5000 1'b0;
	A_or_B[6] = #5000 1'b1;
	A_or_B[6] = #15000 1'b0;
	A_or_B[6] = #20000 1'b1;
	A_or_B[6] = #10000 1'b0;
	A_or_B[6] = #5000 1'b1;
	A_or_B[6] = #5000 1'b0;
	A_or_B[6] = #5000 1'b1;
end 
// A_or_B[ 5 ]
initial
begin
	A_or_B[5] = 1'b1;
	A_or_B[5] = #5000 1'b0;
	A_or_B[5] = #15000 1'b1;
	A_or_B[5] = #10000 1'b0;
	A_or_B[5] = #10000 1'b1;
	A_or_B[5] = #10000 1'b0;
	A_or_B[5] = #5000 1'b1;
	A_or_B[5] = #15000 1'b0;
	A_or_B[5] = #5000 1'b1;
end 
// A_or_B[ 4 ]
initial
begin
	A_or_B[4] = 1'b0;
	A_or_B[4] = #15000 1'b1;
	A_or_B[4] = #30000 1'b0;
	A_or_B[4] = #5000 1'b1;
	A_or_B[4] = #25000 1'b0;
end 
// A_or_B[ 3 ]
initial
begin
	A_or_B[3] = 1'b1;
	A_or_B[3] = #15000 1'b0;
	A_or_B[3] = #5000 1'b1;
	A_or_B[3] = #10000 1'b0;
	A_or_B[3] = #10000 1'b1;
	A_or_B[3] = #5000 1'b0;
	A_or_B[3] = #5000 1'b1;
	A_or_B[3] = #5000 1'b0;
end 
// A_or_B[ 2 ]
initial
begin
	A_or_B[2] = 1'b1;
	A_or_B[2] = #5000 1'b0;
	A_or_B[2] = #10000 1'b1;
	A_or_B[2] = #5000 1'b0;
	A_or_B[2] = #10000 1'b1;
	A_or_B[2] = #5000 1'b0;
	A_or_B[2] = #5000 1'b1;
	A_or_B[2] = #5000 1'b0;
	A_or_B[2] = #10000 1'b1;
	A_or_B[2] = #10000 1'b0;
	A_or_B[2] = #5000 1'b1;
end 
// A_or_B[ 1 ]
initial
begin
	A_or_B[1] = 1'b0;
	A_or_B[1] = #10000 1'b1;
	A_or_B[1] = #5000 1'b0;
	A_or_B[1] = #5000 1'b1;
	A_or_B[1] = #10000 1'b0;
	A_or_B[1] = #15000 1'b1;
	A_or_B[1] = #5000 1'b0;
	A_or_B[1] = #5000 1'b1;
	A_or_B[1] = #10000 1'b0;
	A_or_B[1] = #5000 1'b1;
	A_or_B[1] = #5000 1'b0;
end 
// A_or_B[ 0 ]
initial
begin
	A_or_B[0] = 1'b0;
	A_or_B[0] = #15000 1'b1;
	A_or_B[0] = #5000 1'b0;
	A_or_B[0] = #20000 1'b1;
	A_or_B[0] = #5000 1'b0;
	A_or_B[0] = #15000 1'b1;
	A_or_B[0] = #5000 1'b0;
end 
endmodule

