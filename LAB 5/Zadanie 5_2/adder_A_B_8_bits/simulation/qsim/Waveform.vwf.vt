// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/08/2024 20:45:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          adder_A_B_8_bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module adder_A_B_8_bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A_B;
reg reg_clock;
reg reg_reset;
// wires                                               
wire [7:0] S;
wire cout;
wire [7:0] reg_value;

// assign statements (if any)                          
adder_A_B_8_bits i1 (
// port map - connection between master ports and signals/registers   
	.A_B(A_B),
	.S(S),
	.cout(cout),
	.reg_clock(reg_clock),
	.reg_reset(reg_reset),
	.reg_value(reg_value)
);
initial 
begin 
#100000 $finish;
end 
// A_B[ 7 ]
initial
begin
	A_B[7] = 1'b0;
end 
// A_B[ 6 ]
initial
begin
	A_B[6] = 1'b0;
end 
// A_B[ 5 ]
initial
begin
	A_B[5] = 1'b0;
end 
// A_B[ 4 ]
initial
begin
	A_B[4] = 1'b0;
end 
// A_B[ 3 ]
initial
begin
	A_B[3] = 1'b0;
	A_B[3] = #80000 1'b1;
end 
// A_B[ 2 ]
initial
begin
	A_B[2] = 1'b0;
	A_B[2] = #40000 1'b1;
	A_B[2] = #40000 1'b0;
end 
// A_B[ 1 ]
initial
begin
	repeat(2)
	begin
		A_B[1] = 1'b0;
		A_B[1] = #20000 1'b1;
		# 20000;
	end
	A_B[1] = 1'b0;
end 
// A_B[ 0 ]
always
begin
	A_B[0] = 1'b0;
	A_B[0] = #10000 1'b1;
	#10000;
end 

// reg_reset
initial
begin
	reg_reset = 1'b0;
end 

// reg_clock
initial
begin
	reg_clock = 1'b0;
	reg_clock = #20000 1'b1;
	reg_clock = #10000 1'b0;
	reg_clock = #40000 1'b1;
	reg_clock = #10000 1'b0;
end 
endmodule

