// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/23/2024 18:04:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          accum_N_bits_add_sub
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module accum_N_bits_add_sub_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg aclr;
reg add_sub;
reg clk;
// wires                                               
wire [7:0] A_reg_out;
wire [7:0] S;
wire carry;
wire overflow;

// assign statements (if any)                          
accum_N_bits_add_sub i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.A_reg_out(A_reg_out),
	.S(S),
	.aclr(aclr),
	.add_sub(add_sub),
	.carry(carry),
	.clk(clk),
	.overflow(overflow)
);
initial 
begin 
#100000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 

// aclr
initial
begin
	aclr = 1'b0;
	aclr = #45000 1'b1;
	aclr = #5000 1'b0;
	aclr = #20000 1'b1;
	aclr = #5000 1'b0;
end 

// add_sub
initial
begin
	add_sub = 1'b0;
	add_sub = #20000 1'b1;
	add_sub = #20000 1'b0;
	add_sub = #40000 1'b1;
	add_sub = #10000 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
	A[7] = #60000 1'b1;
	A[7] = #5000 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
	A[6] = #50000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #5000 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #5000 1'b0;
	A[5] = #50000 1'b1;
	A[5] = #5000 1'b0;
	A[5] = #5000 1'b1;
	A[5] = #5000 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	A[4] = #5000 1'b1;
	A[4] = #5000 1'b0;
	A[4] = #15000 1'b1;
	A[4] = #5000 1'b0;
	A[4] = #35000 1'b1;
	A[4] = #20000 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #25000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #5000 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #15000 1'b1;
	A[2] = #10000 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	A[1] = #25000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #35000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #25000 1'b1;
	A[0] = #5000 1'b0;
end 
endmodule

