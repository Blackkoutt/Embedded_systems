// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/10/2024 04:09:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Memory32x8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Memory32x8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] Address;
reg Clock;
reg [7:0] DataIn;
reg Write;
// wires                                               
wire [7:0] DataOut;

// assign statements (if any)                          
Memory32x8 i1 (
// port map - connection between master ports and signals/registers   
	.Address(Address),
	.Clock(Clock),
	.DataIn(DataIn),
	.DataOut(DataOut),
	.Write(Write)
);
initial 
begin 
#150000 $finish;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #2500 1'b1;
	#2500;
end 
// Address[ 4 ]
initial
begin
	Address[4] = 1'b1;
	Address[4] = #5000 1'b0;
	Address[4] = #80000 1'b1;
end 
// Address[ 3 ]
initial
begin
	Address[3] = 1'b1;
	Address[3] = #5000 1'b0;
	Address[3] = #40000 1'b1;
	Address[3] = #40000 1'b0;
	Address[3] = #40000 1'b1;
end 
// Address[ 2 ]
initial
begin
	Address[2] = 1'b1;
	# 5000;
	repeat(3)
	begin
		Address[2] = 1'b0;
		Address[2] = #20000 1'b1;
		# 20000;
	end
	Address[2] = 1'b0;
	Address[2] = #20000 1'b1;
end 
// Address[ 1 ]
initial
begin
	Address[1] = 1'b1;
	# 5000;
	repeat(7)
	begin
		Address[1] = 1'b0;
		Address[1] = #10000 1'b1;
		# 10000;
	end
	Address[1] = 1'b0;
end 
// Address[ 0 ]
initial
begin
	repeat(14)
	begin
		Address[0] = 1'b1;
		Address[0] = #5000 1'b0;
		# 5000;
	end
	Address[0] = 1'b1;
	Address[0] = #5000 1'b0;
end 
// DataIn[ 7 ]
initial
begin
	DataIn[7] = 1'b0;
end 
// DataIn[ 6 ]
initial
begin
	DataIn[6] = 1'b0;
end 
// DataIn[ 5 ]
initial
begin
	DataIn[5] = 1'b0;
end 
// DataIn[ 4 ]
initial
begin
	DataIn[4] = 1'b0;
end 
// DataIn[ 3 ]
initial
begin
	DataIn[3] = 1'b0;
end 
// DataIn[ 2 ]
initial
begin
	DataIn[2] = 1'b0;
end 
// DataIn[ 1 ]
initial
begin
	DataIn[1] = 1'b0;
end 
// DataIn[ 0 ]
initial
begin
	DataIn[0] = 1'b0;
end 

// Write
initial
begin
	Write = 1'b0;
end 
endmodule

