// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/15/2024 14:17:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          my_ram32x4_decoders
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module my_ram32x4_decoders_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] address;
reg clk;
reg [3:0] data;
reg wren;
// wires                                               
wire [0:6] H0_q_out;
wire [0:6] H2_data_in;
wire [0:6] H4_addr_0;
wire [0:6] H5_addr_1;

// assign statements (if any)                          
my_ram32x4_decoders i1 (
// port map - connection between master ports and signals/registers   
	.H0_q_out(H0_q_out),
	.H2_data_in(H2_data_in),
	.H4_addr_0(H4_addr_0),
	.H5_addr_1(H5_addr_1),
	.address(address),
	.clk(clk),
	.data(data),
	.wren(wren)
);
initial 
begin 
#85000 $finish;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b0;
	address[4] = #40000 1'b1;
	address[4] = #10000 1'b0;
	address[4] = #10000 1'b1;
	address[4] = #10000 1'b0;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b0;
	address[3] = #40000 1'b1;
	address[3] = #10000 1'b0;
	address[3] = #10000 1'b1;
	address[3] = #10000 1'b0;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b0;
	address[2] = #40000 1'b1;
	address[2] = #10000 1'b0;
	address[2] = #10000 1'b1;
	address[2] = #10000 1'b0;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b0;
	address[1] = #40000 1'b1;
	address[1] = #10000 1'b0;
	address[1] = #10000 1'b1;
	address[1] = #10000 1'b0;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b0;
	address[0] = #40000 1'b1;
	address[0] = #10000 1'b0;
	address[0] = #10000 1'b1;
	address[0] = #10000 1'b0;
end 

// clk
initial
begin
	repeat(8)
	begin
		clk = 1'b0;
		clk = #5000 1'b1;
		# 5000;
	end
	clk = 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
	data[3] = #20000 1'b1;
	data[3] = #10000 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
	data[2] = #40000 1'b1;
	data[2] = #10000 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
	data[1] = #20000 1'b1;
	data[1] = #10000 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
	data[0] = #40000 1'b1;
	data[0] = #10000 1'b0;
end 

// wren
initial
begin
	wren = 1'b0;
	wren = #20000 1'b1;
	wren = #10000 1'b0;
	wren = #10000 1'b1;
	wren = #10000 1'b0;
end 
endmodule

