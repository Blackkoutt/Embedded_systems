// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/20/2024 08:41:17"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ram_1_sec_word_showing
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ram_1_sec_word_showing_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] data;
reg reset;
reg [4:0] write_addr;
reg write_ena;
// wires                                               
wire [3:0] q;
wire [4:0] read_addr;

// assign statements (if any)                          
ram_1_sec_word_showing i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data(data),
	.q(q),
	.read_addr(read_addr),
	.reset(reset),
	.write_addr(write_addr),
	.write_ena(write_ena)
);
initial 
begin 
#100000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 

// reset
initial
begin
	reset = 1'b1;
end 
// write_addr[ 4 ]
initial
begin
	write_addr[4] = 1'b0;
end 
// write_addr[ 3 ]
initial
begin
	write_addr[3] = 1'b0;
	write_addr[3] = #15000 1'b1;
	write_addr[3] = #5000 1'b0;
	write_addr[3] = #15000 1'b1;
	write_addr[3] = #5000 1'b0;
end 
// write_addr[ 2 ]
initial
begin
	write_addr[2] = 1'b0;
	write_addr[2] = #15000 1'b1;
	write_addr[2] = #5000 1'b0;
	write_addr[2] = #5000 1'b1;
	write_addr[2] = #5000 1'b0;
end 
// write_addr[ 1 ]
initial
begin
	write_addr[1] = 1'b0;
	write_addr[1] = #5000 1'b1;
	write_addr[1] = #5000 1'b0;
	write_addr[1] = #15000 1'b1;
	write_addr[1] = #5000 1'b0;
	write_addr[1] = #5000 1'b1;
	write_addr[1] = #5000 1'b0;
end 
// write_addr[ 0 ]
initial
begin
	write_addr[0] = 1'b0;
	write_addr[0] = #5000 1'b1;
	write_addr[0] = #5000 1'b0;
	write_addr[0] = #15000 1'b1;
	write_addr[0] = #5000 1'b0;
end 

// write_ena
initial
begin
	write_ena = 1'b0;
	write_ena = #5000 1'b1;
	write_ena = #5000 1'b0;
	write_ena = #5000 1'b1;
	write_ena = #5000 1'b0;
	write_ena = #5000 1'b1;
	write_ena = #5000 1'b0;
	write_ena = #5000 1'b1;
	write_ena = #5000 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
	data[3] = #15000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #5000 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
	data[1] = #15000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #5000 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #15000 1'b1;
	data[0] = #5000 1'b0;
end 
endmodule

